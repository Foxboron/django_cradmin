############################################################
`viewhelpers.listfilter` --- a framework for filtering lists
############################################################

The ``django_cradmin.viewhelpers.listfilter`` framework makes it
easy to add filters to your listviews. It works with any view that
lists items (from the database or other sources).


***************
Getting started
***************



***************
Tips and tricks
***************
- If you want to send a queryset to all your filters,
  you can override one of the AbstractFilterList subclasses
  and send the queryset into ``__init__()``. All of the
  filters (and other :class:`~django_cradmin.viewhelpers.listfilter.base.AbstractGroupChild`)
  has access to the filterlist via their ``filterlist`` attribute.
  This can of course be used to share any kind of information that your
  filters need.


**********************
Design --- why and how
**********************
The listfilter module is designed to be data store agnostic. This
means that we use general purpose terms and logic that does not
bind the framework to a specific data storage backend.

The most obvious of these strange terms when working with the filters in
``django_cradmin.viewshelpers.listbuilder.django`` is that you
send the model field into the filter via the ``slug`` parameter.
This is much easier to understand when you know the following:

- Each filter has a slug. The slug is the thing added to the URL,
  and reversed to extract the filter values from the URL.
- The base class for all Django filters,
  :class:`~django_cradmin.viewhelpers.listfilter.django.base.AbstractDjangoOrmFilter`,
  defines :meth:`~django_cradmin.viewhelpers.listfilter.django.base.AbstractDjangoOrmFilter.get_modelfield`,
  which simply defalts to returning the slug of the filter. You can override this if you want
  to have a different slug in the URL than the model field name.


Code structure
==============
The code is organized into these sub-modules of ``django_cradmin.viewhelpers.listfilter``:

    base
        Base classes. Very rarely used directly except when creating completely custom
        components for the framework.
    lists
        Re-usable subclasses of
        :class:`~django_cradmin.viewhelpers.listfilter.base.abstractfilterlist.AbstractFilterList`.
    basefilters
        Re-usable data store agnostic abstract filter classes.
    django
        Re-usable Django ORM specific subclasses of
        :class:`~django_cradmin.viewhelpers.listfilter.base.abstractfilter.AbstractFilter`.
        These are mostly fairly small extensions of classes in ``basefilters`` that just
        add the Django ORM specific stuff.


************
How it works
************
A filter is just a class that lets the user select from a
list of choices and filter a list based on their selection.

The base class (:class:`django_cradmin.viewhelpers.listfilter.base.AbstractFilter`)
is completely decoupled from the storage backend, and just provides
methods that any filter needs to override.

A filter is rendered by a :class:`django_cradmin.viewhelpers.listfilter.base.AbstractFilterList`.
A filterlist is simply a list of :class:`django_cradmin.viewhelpers.listfilter.base.AbstractGroupChild`,
which is a subclass of :class:`.AbstractRenderableWithCss`.

:class:`~django_cradmin.viewhelpers.listfilter.base.AbstractGroupChild` can render anything,
so it is perfect for adding things like sectioning and extra text in your
filterlists. For the actual filters, we have :class:`django_cradmin.viewhelpers.listfilter.base.AbstractFilter`
(a subclass of :class:`~django_cradmin.viewhelpers.listfilter.base.AbstractGroupChild`). Subclasses of
this is this gets special treatment by :meth:`django_cradmin.viewhelpers.listfilter.base.AbstractFilterList`.


To summarize, you do the following to define filters for a view:

- Create an instance of a subclass of :class:`django_cradmin.viewhelpers.listfilter.base.AbstractFilterList`.
- Add subclasses of :class:`django_cradmin.viewhelpers.listfilter.base.AbstractFilter` to the filter filterlist.
- Call the render() method of the filter filterlist to render all the filters.


URLs generated by filters
=========================

.. todo:: Change this to talk about FiltersHandler

Each filter has a slug (:meth:`django_cradmin.viewhelpers.listfilter.base.AbstractFilter.get_slug`).
The slug is used in the URL to identify the filter. Example::

    /my/view/hasimage-true/size-large/tags-a,b/

Here ``tag`` and ``hasimage`` are slugs for the applied filters.

Filters are added to the url with ``(?P<filters>.*)``.


Multiselect filters
===================
TODO



******************
Django filters API
******************


Singlevalue widgets
===================

.. currentmodule:: django_cradmin.viewhelpers.listfilter.django.single.base
.. automodule:: django_cradmin.viewhelpers.listfilter.django.single.base

.. currentmodule:: django_cradmin.viewhelpers.listfilter.django.single.selectinput
.. automodule:: django_cradmin.viewhelpers.listfilter.django.single.selectinput



Multivalue widgets
==================
TODO


********
Base API
********

.. note::

  You do not use the ``django_cradmin.viewhelpers.listfilter.base``
  API directly - You can use the classes as superclasses when you
  create custom filters or filterlists.

.. currentmodule:: django_cradmin.viewhelpers.listfilter.base

.. automodule:: django_cradmin.viewhelpers.listfilter.base
