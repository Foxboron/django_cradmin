##############################################
Listfilter --- a framework for filtering lists
##############################################

The ``django_cradmin.viewhelpers.listfilter`` framework makes it
easy to add filters to your listviews. It works with any view that
lists items (from the database or other sources).


***************
Getting started
***************




************
How it works
************
A filter is just a class that lets the user select from a
list of choices and filter a list based on their selection.

The base class (:class:`django_cradmin.listfilter.base.AbstractFilter`)
is completely decoupled from the storage backend, and just provides
methods that any filter needs to override.

A filter is rendered by a :class:`django_cradmin.listfilter.base.AbstractFilterGroup`.
Each filter group can have the following:

- List of :class:`django_cradmin.listfilter.base.AbstractFilter`.
- A title.
- List of child filter groups. Can not have both child filter groups and child filters.


To summarize, you do the following to define filters for a view:

- Create an instance of a subclass of :class:`django_cradmin.listfilter.base.AbstractFilterGroup`.
- Add subclasses of :class:`django_cradmin.listfilter.base.AbstractFilter` to the filter group.
- Call the render() method of the filter group to render all the filters.


URLs generated by filters
=========================
Each filter has a slug (:meth:`django_cradmin.listfilter.base.AbstractFilter.get_slug`).
The slug is used in the URL to identify the filter. Example::

    /my/view/hasimage-true/size-large/tags-size/

Here ``tag`` and ``hasimage`` are slugs for the applied filters.

Filters are added to the url with ``(?P<filters>.*)``.


Multiselect filters
===================
TODO
