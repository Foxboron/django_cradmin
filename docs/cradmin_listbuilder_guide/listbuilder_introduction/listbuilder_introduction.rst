.. _listbuilder_introduction:

############
Introduction
############

In this tutorial we will focus on building lists in different ways and demonstrate, if not all, most of the
functionality for lists in CRadmin in an easy way. If you just need to read the documentation about about CRadmin lists,
you'll find this at :doc:`CRadmin lists <../../viewhelpers_listbuilder>`.

This tutorial requires a basic understanding of CRadmin. If you are new to CRadmin, please do the
:ref:`index_gettingstarted` guide before continuing.

We start by creating the some models wich we later on will use to create object instances in our lists. After that we
start by giving a high level overlook of the classes and how they are connected together in CRadmin when we work with
lists. The next part of this tutorial will be in more in depth details about methods and opportunities for lists in
CRadmin.


======
Models
======
When we create the models there is one thing we must keep in mind, and that is the verbose name. As you know Django
sets this to the field name if we don't specific otherwise. In CRadmin the class
:class:`django_cradmin.viewhelpers.listbuilderview.View` expects you to set the model class to display in our list. When
the page with the list, or lists, is rendered CRadmin uses the verbose name as the page title. For this guide we have
very easy verbose names, so we can use what is automaticly generated by Django, which is the field name with a capitol
first letter.

It really doesn't matter what kind of models we use when learning the listbuilder in CRadmin, as long as it is possible
to generate nested lists. For instance can you use persons and family relations, cars with manufactor, models and types
or bands, albums and songs. In this guide we choose the latter.

.. note::
    In this guide we don't reconsider if a song is written by someone else but the artist, nor if a band consists of
    four members and just one or two band members wrote the song. We are not creating an application which shall be
    used in real life. The point being to create lists of different kind.

Our models file may look something like this:

.. literalinclude:: /../django_cradmin/demo/cradmin_listbuilder_guide/models.py

Test Models
-----------
To be sure everything works as inteded, please do write some simple tests for each model class where you check
instanciation, that the instance has the expected attributes and the __str__ method. A good practice is to create a
template which you can use each time.






